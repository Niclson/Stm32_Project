
STM32F401RE_sleep_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000384  08000384  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000384  08000384  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000384  08000384  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000384  08000384  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000384  08000384  00010384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800038c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000390  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000390  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015a6  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004dd  00000000  00000000  000215da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00021ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00021c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000139af  00000000  00000000  00021df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d2c  00000000  00000000  0003579f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d10c  00000000  00000000  000374cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b45d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000524  00000000  00000000  000b4654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800036c 	.word	0x0800036c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800036c 	.word	0x0800036c

080001d4 <main>:

#include "main.h"

int main(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80001d8:	4b10      	ldr	r3, [pc, #64]	; (800021c <main+0x48>)
 80001da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001dc:	4a0f      	ldr	r2, [pc, #60]	; (800021c <main+0x48>)
 80001de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001e2:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_CWUF;
 80001e4:	4b0e      	ldr	r3, [pc, #56]	; (8000220 <main+0x4c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <main+0x4c>)
 80001ea:	f043 0304 	orr.w	r3, r3, #4
 80001ee:	6013      	str	r3, [r2, #0]
	PWR->CR |= PWR_CR_PDDS;
 80001f0:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <main+0x4c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a0a      	ldr	r2, [pc, #40]	; (8000220 <main+0x4c>)
 80001f6:	f043 0302 	orr.w	r3, r3, #2
 80001fa:	6013      	str	r3, [r2, #0]
	SCB->SCR |= (1<<SCB_SCR_SLEEPDEEP_Pos);
 80001fc:	4b09      	ldr	r3, [pc, #36]	; (8000224 <main+0x50>)
 80001fe:	691b      	ldr	r3, [r3, #16]
 8000200:	4a08      	ldr	r2, [pc, #32]	; (8000224 <main+0x50>)
 8000202:	f043 0304 	orr.w	r3, r3, #4
 8000206:	6113      	str	r3, [r2, #16]
	while (PWR->CR & (PWR_CR_CWUF));
 8000208:	bf00      	nop
 800020a:	4b05      	ldr	r3, [pc, #20]	; (8000220 <main+0x4c>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f003 0304 	and.w	r3, r3, #4
 8000212:	2b00      	cmp	r3, #0
 8000214:	d1f9      	bne.n	800020a <main+0x36>
	__WFI();
 8000216:	bf30      	wfi

  while (1)
 8000218:	e7fe      	b.n	8000218 <main+0x44>
 800021a:	bf00      	nop
 800021c:	40023800 	.word	0x40023800
 8000220:	40007000 	.word	0x40007000
 8000224:	e000ed00 	.word	0xe000ed00

08000228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800022c:	e7fe      	b.n	800022c <NMI_Handler+0x4>

0800022e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000232:	e7fe      	b.n	8000232 <HardFault_Handler+0x4>

08000234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000238:	e7fe      	b.n	8000238 <MemManage_Handler+0x4>

0800023a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800023a:	b480      	push	{r7}
 800023c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800023e:	e7fe      	b.n	800023e <BusFault_Handler+0x4>

08000240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000244:	e7fe      	b.n	8000244 <UsageFault_Handler+0x4>

08000246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000246:	b480      	push	{r7}
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800024a:	bf00      	nop
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr

08000254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr

08000262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000274:	f000 f842 	bl	80002fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}

0800027c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <SystemInit+0x28>)
 8000282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000286:	4a07      	ldr	r2, [pc, #28]	; (80002a4 <SystemInit+0x28>)
 8000288:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800028c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <SystemInit+0x28>)
 8000292:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000296:	609a      	str	r2, [r3, #8]
#endif
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000ed00 	.word	0xe000ed00

080002a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002ae:	e003      	b.n	80002b8 <LoopCopyDataInit>

080002b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002b6:	3104      	adds	r1, #4

080002b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002b8:	480b      	ldr	r0, [pc, #44]	; (80002e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002c0:	d3f6      	bcc.n	80002b0 <CopyDataInit>
  ldr  r2, =_sbss
 80002c2:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002c4:	e002      	b.n	80002cc <LoopFillZerobss>

080002c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002c8:	f842 3b04 	str.w	r3, [r2], #4

080002cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002d0:	d3f9      	bcc.n	80002c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002d2:	f7ff ffd3 	bl	800027c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002d6:	f000 f825 	bl	8000324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002da:	f7ff ff7b 	bl	80001d4 <main>
  bx  lr    
 80002de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002e0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80002e4:	0800038c 	.word	0x0800038c
  ldr  r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002ec:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80002f0:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80002f4:	20000024 	.word	0x20000024

080002f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <HAL_IncTick+0x20>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	461a      	mov	r2, r3
 8000306:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_IncTick+0x24>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4413      	add	r3, r2
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_IncTick+0x24>)
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000000 	.word	0x20000000
 8000320:	20000020 	.word	0x20000020

08000324 <__libc_init_array>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	4e0d      	ldr	r6, [pc, #52]	; (800035c <__libc_init_array+0x38>)
 8000328:	4c0d      	ldr	r4, [pc, #52]	; (8000360 <__libc_init_array+0x3c>)
 800032a:	1ba4      	subs	r4, r4, r6
 800032c:	10a4      	asrs	r4, r4, #2
 800032e:	2500      	movs	r5, #0
 8000330:	42a5      	cmp	r5, r4
 8000332:	d109      	bne.n	8000348 <__libc_init_array+0x24>
 8000334:	4e0b      	ldr	r6, [pc, #44]	; (8000364 <__libc_init_array+0x40>)
 8000336:	4c0c      	ldr	r4, [pc, #48]	; (8000368 <__libc_init_array+0x44>)
 8000338:	f000 f818 	bl	800036c <_init>
 800033c:	1ba4      	subs	r4, r4, r6
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	2500      	movs	r5, #0
 8000342:	42a5      	cmp	r5, r4
 8000344:	d105      	bne.n	8000352 <__libc_init_array+0x2e>
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800034c:	4798      	blx	r3
 800034e:	3501      	adds	r5, #1
 8000350:	e7ee      	b.n	8000330 <__libc_init_array+0xc>
 8000352:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000356:	4798      	blx	r3
 8000358:	3501      	adds	r5, #1
 800035a:	e7f2      	b.n	8000342 <__libc_init_array+0x1e>
 800035c:	08000384 	.word	0x08000384
 8000360:	08000384 	.word	0x08000384
 8000364:	08000384 	.word	0x08000384
 8000368:	08000388 	.word	0x08000388

0800036c <_init>:
 800036c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036e:	bf00      	nop
 8000370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000372:	bc08      	pop	{r3}
 8000374:	469e      	mov	lr, r3
 8000376:	4770      	bx	lr

08000378 <_fini>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr
