
STM32F413zh_SleepModeStendby_ExternalInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000404  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005dc  080005dc  0003edd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005dc  080005dc  0003edd4  2**0
                  CONTENTS
  4 .ARM          00000000  080005dc  080005dc  0003edd4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005dc  080005dc  0003edd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005dc  080005dc  000105dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005e0  080005e0  000105e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001edd4  20000000  080005e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2001edd4  0801f3b8  0003edd4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001edf4  0801f3b8  0003edf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003edd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e5f  00000000  00000000  0003ee04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005bb  00000000  00000000  00040c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  00041220  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  00041418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e6c3  00000000  00000000  000415c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e4d  00000000  00000000  0005fc8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd907  00000000  00000000  00061ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f3df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000610  00000000  00000000  0011f45c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2001edd4 	.word	0x2001edd4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080005c4 	.word	0x080005c4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2001edd8 	.word	0x2001edd8
 8000214:	080005c4 	.word	0x080005c4

08000218 <SysClock_Init>:
		0x66, 0x68, 0x68, 0x62, 0x61, 0x62, 0x62, 0x5f, 0x5f, 0x61, 0x60, 0x61, 0x62, 0x65, 0x69, 0x6e,
		0x70, 0x6d, 0x6b, 0x65, 0x5e, 0x62, 0x6a, 0x72, 0x79, 0x78, 0x74, 0x6f, 0x68, 0x61, 0x52, 0x3e

};

void SysClock_Init(void) {
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	RCC->CR   |= RCC_CR_HSEON;
 800021c:	4b0b      	ldr	r3, [pc, #44]	; (800024c <SysClock_Init+0x34>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a0a      	ldr	r2, [pc, #40]	; (800024c <SysClock_Init+0x34>)
 8000222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000226:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <SysClock_Init+0x34>)
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <SysClock_Init+0x34>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSE);
 8000234:	bf00      	nop
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <SysClock_Init+0x34>)
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	f003 030c 	and.w	r3, r3, #12
 800023e:	2b04      	cmp	r3, #4
 8000240:	d1f9      	bne.n	8000236 <SysClock_Init+0x1e>
}
 8000242:	bf00      	nop
 8000244:	46bd      	mov	sp, r7
 8000246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024a:	4770      	bx	lr
 800024c:	40023800 	.word	0x40023800

08000250 <Init_DAC_Noise>:
	 while (PWR->CR & (PWR_CR_CWUF));

	 __WFI();
 }

 void Init_DAC_Noise (void){
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0

 	RCC -> APB1ENR |= RCC_APB1ENR_DACEN;  // тактирование цап
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <Init_DAC_Noise+0x68>)
 8000256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000258:	4a17      	ldr	r2, [pc, #92]	; (80002b8 <Init_DAC_Noise+0x68>)
 800025a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800025e:	6413      	str	r3, [r2, #64]	; 0x40
 	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // тактирование порта А
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <Init_DAC_Noise+0x68>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a14      	ldr	r2, [pc, #80]	; (80002b8 <Init_DAC_Noise+0x68>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
 	GPIOA -> MODER |= GPIO_MODER_MODER4_1 | GPIO_MODER_MODER4_0; // Analog mode
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <Init_DAC_Noise+0x6c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a12      	ldr	r2, [pc, #72]	; (80002bc <Init_DAC_Noise+0x6c>)
 8000272:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000276:	6013      	str	r3, [r2, #0]
 	GPIOA -> MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER5_0; // Analog mode
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <Init_DAC_Noise+0x6c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <Init_DAC_Noise+0x6c>)
 800027e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000282:	6013      	str	r3, [r2, #0]
 #if 1
 	DAC1 -> CR |= DAC_CR_WAVE2_1;
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <Init_DAC_Noise+0x70>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <Init_DAC_Noise+0x70>)
 800028a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800028e:	6013      	str	r3, [r2, #0]
 	DAC1 -> CR |= DAC_CR_MAMP2_3| DAC_CR_MAMP2_2 |DAC_CR_MAMP2_1| DAC_CR_MAMP2_0;
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <Init_DAC_Noise+0x70>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <Init_DAC_Noise+0x70>)
 8000296:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800029a:	6013      	str	r3, [r2, #0]
 	//DAC1 -> SWTRIGR |= DAC_SWTRIGR_SWTRIG1; // начало преобразования
 	//DAC1 -> CR |= DAC_CR_TEN1;
 	//DAC1 -> CR |= DAC_CR_TSEL1_0 | DAC_CR_TSEL1_1;
 	DAC1 -> DHR12R2 = 0;
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <Init_DAC_Noise+0x70>)
 800029e:	2200      	movs	r2, #0
 80002a0:	615a      	str	r2, [r3, #20]
 	DAC1 -> CR |= DAC_CR_EN2;
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <Init_DAC_Noise+0x70>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <Init_DAC_Noise+0x70>)
 80002a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ac:	6013      	str	r3, [r2, #0]
 #endif
 }
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000
 80002c0:	40007400 	.word	0x40007400

080002c4 <main>:

int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
	SysClock_Init();
 80002ca:	f7ff ffa5 	bl	8000218 <SysClock_Init>

	GPIOA -> MODER = 0xffffffff;
 80002ce:	4b55      	ldr	r3, [pc, #340]	; (8000424 <main+0x160>)
 80002d0:	f04f 32ff 	mov.w	r2, #4294967295
 80002d4:	601a      	str	r2, [r3, #0]
	GPIOB -> MODER = 0xffffffff;
 80002d6:	4b54      	ldr	r3, [pc, #336]	; (8000428 <main+0x164>)
 80002d8:	f04f 32ff 	mov.w	r2, #4294967295
 80002dc:	601a      	str	r2, [r3, #0]
	GPIOC -> MODER = 0xffffffff;
 80002de:	4b53      	ldr	r3, [pc, #332]	; (800042c <main+0x168>)
 80002e0:	f04f 32ff 	mov.w	r2, #4294967295
 80002e4:	601a      	str	r2, [r3, #0]
	GPIOD -> MODER = 0xffffffff;
 80002e6:	4b52      	ldr	r3, [pc, #328]	; (8000430 <main+0x16c>)
 80002e8:	f04f 32ff 	mov.w	r2, #4294967295
 80002ec:	601a      	str	r2, [r3, #0]
	GPIOE -> MODER = 0xffffffff;
 80002ee:	4b51      	ldr	r3, [pc, #324]	; (8000434 <main+0x170>)
 80002f0:	f04f 32ff 	mov.w	r2, #4294967295
 80002f4:	601a      	str	r2, [r3, #0]
	GPIOF -> MODER = 0xffffffff;
 80002f6:	4b50      	ldr	r3, [pc, #320]	; (8000438 <main+0x174>)
 80002f8:	f04f 32ff 	mov.w	r2, #4294967295
 80002fc:	601a      	str	r2, [r3, #0]
	GPIOH -> MODER = (1<<0);
 80002fe:	4b4f      	ldr	r3, [pc, #316]	; (800043c <main+0x178>)
 8000300:	2201      	movs	r2, #1
 8000302:	601a      	str	r2, [r3, #0]

	Init_DAC_Noise();
 8000304:	f7ff ffa4 	bl	8000250 <Init_DAC_Noise>

	RCC ->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000308:	4b4d      	ldr	r3, [pc, #308]	; (8000440 <main+0x17c>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030c:	4a4c      	ldr	r2, [pc, #304]	; (8000440 <main+0x17c>)
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOB -> MODER |= GPIO_MODER_MODER14_0;
 8000314:	4b44      	ldr	r3, [pc, #272]	; (8000428 <main+0x164>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a43      	ldr	r2, [pc, #268]	; (8000428 <main+0x164>)
 800031a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800031e:	6013      	str	r3, [r2, #0]
	//GPIOB -> ODR |= GPIO_ODR_OD14;

	GPIOB -> MODER |= GPIO_MODER_MODER7_0;
 8000320:	4b41      	ldr	r3, [pc, #260]	; (8000428 <main+0x164>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a40      	ldr	r2, [pc, #256]	; (8000428 <main+0x164>)
 8000326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800032a:	6013      	str	r3, [r2, #0]
	//GPIOB -> ODR |= GPIO_ODR_OD7;

	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800032c:	4b44      	ldr	r3, [pc, #272]	; (8000440 <main+0x17c>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000330:	4a43      	ldr	r2, [pc, #268]	; (8000440 <main+0x17c>)
 8000332:	f043 0301 	orr.w	r3, r3, #1
 8000336:	6313      	str	r3, [r2, #48]	; 0x30
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000338:	4b41      	ldr	r3, [pc, #260]	; (8000440 <main+0x17c>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4a40      	ldr	r2, [pc, #256]	; (8000440 <main+0x17c>)
 800033e:	f043 0304 	orr.w	r3, r3, #4
 8000342:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA -> PUPDR |= GPIO_PUPDR_PUPD0_1;
 8000344:	4b37      	ldr	r3, [pc, #220]	; (8000424 <main+0x160>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	4a36      	ldr	r2, [pc, #216]	; (8000424 <main+0x160>)
 800034a:	f043 0302 	orr.w	r3, r3, #2
 800034e:	60d3      	str	r3, [r2, #12]
	GPIOA -> PUPDR |= GPIO_PUPDR_PUPD0_1;
 8000350:	4b34      	ldr	r3, [pc, #208]	; (8000424 <main+0x160>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a33      	ldr	r2, [pc, #204]	; (8000424 <main+0x160>)
 8000356:	f043 0302 	orr.w	r3, r3, #2
 800035a:	60d3      	str	r3, [r2, #12]

	GPIOC -> PUPDR |= GPIO_PUPDR_PUPD0_1;
 800035c:	4b33      	ldr	r3, [pc, #204]	; (800042c <main+0x168>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a32      	ldr	r2, [pc, #200]	; (800042c <main+0x168>)
 8000362:	f043 0302 	orr.w	r3, r3, #2
 8000366:	60d3      	str	r3, [r2, #12]
	GPIOC -> PUPDR |= GPIO_PUPDR_PUPD0_1;
 8000368:	4b30      	ldr	r3, [pc, #192]	; (800042c <main+0x168>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a2f      	ldr	r2, [pc, #188]	; (800042c <main+0x168>)
 800036e:	f043 0302 	orr.w	r3, r3, #2
 8000372:	60d3      	str	r3, [r2, #12]

	if(GPIOA->IDR&GPIO_IDR_ID0){
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <main+0x160>)
 8000376:	691b      	ldr	r3, [r3, #16]
 8000378:	f003 0301 	and.w	r3, r3, #1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d01e      	beq.n	80003be <main+0xfa>
		GPIOB -> ODR |= GPIO_ODR_OD14;
 8000380:	4b29      	ldr	r3, [pc, #164]	; (8000428 <main+0x164>)
 8000382:	695b      	ldr	r3, [r3, #20]
 8000384:	4a28      	ldr	r2, [pc, #160]	; (8000428 <main+0x164>)
 8000386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800038a:	6153      	str	r3, [r2, #20]

		for (uint32_t counter=0; counter < 17920; counter++){
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e011      	b.n	80003b6 <main+0xf2>

			DAC1 -> DHR12R1 = buff[counter];
 8000392:	4a2c      	ldr	r2, [pc, #176]	; (8000444 <main+0x180>)
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	4413      	add	r3, r2
 8000398:	781a      	ldrb	r2, [r3, #0]
 800039a:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <main+0x184>)
 800039c:	609a      	str	r2, [r3, #8]

			uint32_t count = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
			while(count<100) {count++;}
 80003a2:	e002      	b.n	80003aa <main+0xe6>
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	3301      	adds	r3, #1
 80003a8:	613b      	str	r3, [r7, #16]
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	2b63      	cmp	r3, #99	; 0x63
 80003ae:	d9f9      	bls.n	80003a4 <main+0xe0>
		for (uint32_t counter=0; counter < 17920; counter++){
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	3301      	adds	r3, #1
 80003b4:	617b      	str	r3, [r7, #20]
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	f5b3 4f8c 	cmp.w	r3, #17920	; 0x4600
 80003bc:	d3e9      	bcc.n	8000392 <main+0xce>
		}
	}

	if(GPIOC->IDR&GPIO_IDR_ID0){
 80003be:	4b1b      	ldr	r3, [pc, #108]	; (800042c <main+0x168>)
 80003c0:	691b      	ldr	r3, [r3, #16]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d00f      	beq.n	80003ea <main+0x126>
		GPIOB -> ODR |= GPIO_ODR_OD7;
 80003ca:	4b17      	ldr	r3, [pc, #92]	; (8000428 <main+0x164>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a16      	ldr	r2, [pc, #88]	; (8000428 <main+0x164>)
 80003d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d4:	6153      	str	r3, [r2, #20]
		uint32_t counter=0;
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
		while(counter<1000000){counter++;}
 80003da:	e002      	b.n	80003e2 <main+0x11e>
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	3301      	adds	r3, #1
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	4a19      	ldr	r2, [pc, #100]	; (800044c <main+0x188>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d9f8      	bls.n	80003dc <main+0x118>
	//Init_EXTI();
	//Init_LowPower_Stendby();

	while (1)
	{
		for (uint32_t counter=0; counter < 126400; counter++){
 80003ea:	2300      	movs	r3, #0
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	e013      	b.n	8000418 <main+0x154>

			DAC1 -> DHR12R2 = (buff[counter])+35;
 80003f0:	4a14      	ldr	r2, [pc, #80]	; (8000444 <main+0x180>)
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	4413      	add	r3, r2
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	f103 0223 	add.w	r2, r3, #35	; 0x23
 80003fc:	4b12      	ldr	r3, [pc, #72]	; (8000448 <main+0x184>)
 80003fe:	615a      	str	r2, [r3, #20]

			uint32_t count = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	607b      	str	r3, [r7, #4]
			while(count<14) {count++;}
 8000404:	e002      	b.n	800040c <main+0x148>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	3301      	adds	r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2b0d      	cmp	r3, #13
 8000410:	d9f9      	bls.n	8000406 <main+0x142>
		for (uint32_t counter=0; counter < 126400; counter++){
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	3301      	adds	r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	4a0d      	ldr	r2, [pc, #52]	; (8000450 <main+0x18c>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d9e7      	bls.n	80003f0 <main+0x12c>
 8000420:	e7e3      	b.n	80003ea <main+0x126>
 8000422:	bf00      	nop
 8000424:	40020000 	.word	0x40020000
 8000428:	40020400 	.word	0x40020400
 800042c:	40020800 	.word	0x40020800
 8000430:	40020c00 	.word	0x40020c00
 8000434:	40021000 	.word	0x40021000
 8000438:	40021400 	.word	0x40021400
 800043c:	40021c00 	.word	0x40021c00
 8000440:	40023800 	.word	0x40023800
 8000444:	20000000 	.word	0x20000000
 8000448:	40007400 	.word	0x40007400
 800044c:	000f423f 	.word	0x000f423f
 8000450:	0001edbf 	.word	0x0001edbf

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <NMI_Handler+0x4>

0800045a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <MemManage_Handler+0x4>

08000466 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <BusFault_Handler+0x4>

0800046c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <UsageFault_Handler+0x4>

08000472 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr

08000480 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr

0800048e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a0:	f000 f858 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	// обработчик прерывания.
		// так как он работает на 5 пинов. нужно проверять откуда пришло нажание -- регистр PR

		if((EXTI -> PR & (EXTI_PR_PR13))){
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <EXTI15_10_IRQHandler+0x28>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d006      	beq.n	80004c6 <EXTI15_10_IRQHandler+0x1e>
			EXTI -> PR |= (EXTI_PR_PR13); // сброс, чтоб не завис
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <EXTI15_10_IRQHandler+0x28>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <EXTI15_10_IRQHandler+0x28>)
 80004be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004c2:	6153      	str	r3, [r2, #20]
		}

			return;
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
}
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	40013c00 	.word	0x40013c00

080004d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <SystemInit+0x28>)
 80004da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <SystemInit+0x28>)
 80004e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <SystemInit+0x28>)
 80004ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004ee:	609a      	str	r2, [r3, #8]
#endif
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	e000ed00 	.word	0xe000ed00

08000500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000538 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000504:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000506:	e003      	b.n	8000510 <LoopCopyDataInit>

08000508 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800050a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800050c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800050e:	3104      	adds	r1, #4

08000510 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000514:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000516:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000518:	d3f6      	bcc.n	8000508 <CopyDataInit>
  ldr  r2, =_sbss
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800051c:	e002      	b.n	8000524 <LoopFillZerobss>

0800051e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800051e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000520:	f842 3b04 	str.w	r3, [r2], #4

08000524 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000526:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000528:	d3f9      	bcc.n	800051e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800052a:	f7ff ffd3 	bl	80004d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800052e:	f000 f825 	bl	800057c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000532:	f7ff fec7 	bl	80002c4 <main>
  bx  lr    
 8000536:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000538:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800053c:	080005e4 	.word	0x080005e4
  ldr  r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000544:	2001edd4 	.word	0x2001edd4
  ldr  r2, =_sbss
 8000548:	2001edd4 	.word	0x2001edd4
  ldr  r3, = _ebss
 800054c:	2001edf4 	.word	0x2001edf4

08000550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC_IRQHandler>
	...

08000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_IncTick+0x20>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_IncTick+0x24>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_IncTick+0x24>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	2001edd0 	.word	0x2001edd0
 8000578:	2001edf0 	.word	0x2001edf0

0800057c <__libc_init_array>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	4e0d      	ldr	r6, [pc, #52]	; (80005b4 <__libc_init_array+0x38>)
 8000580:	4c0d      	ldr	r4, [pc, #52]	; (80005b8 <__libc_init_array+0x3c>)
 8000582:	1ba4      	subs	r4, r4, r6
 8000584:	10a4      	asrs	r4, r4, #2
 8000586:	2500      	movs	r5, #0
 8000588:	42a5      	cmp	r5, r4
 800058a:	d109      	bne.n	80005a0 <__libc_init_array+0x24>
 800058c:	4e0b      	ldr	r6, [pc, #44]	; (80005bc <__libc_init_array+0x40>)
 800058e:	4c0c      	ldr	r4, [pc, #48]	; (80005c0 <__libc_init_array+0x44>)
 8000590:	f000 f818 	bl	80005c4 <_init>
 8000594:	1ba4      	subs	r4, r4, r6
 8000596:	10a4      	asrs	r4, r4, #2
 8000598:	2500      	movs	r5, #0
 800059a:	42a5      	cmp	r5, r4
 800059c:	d105      	bne.n	80005aa <__libc_init_array+0x2e>
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005a4:	4798      	blx	r3
 80005a6:	3501      	adds	r5, #1
 80005a8:	e7ee      	b.n	8000588 <__libc_init_array+0xc>
 80005aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005ae:	4798      	blx	r3
 80005b0:	3501      	adds	r5, #1
 80005b2:	e7f2      	b.n	800059a <__libc_init_array+0x1e>
 80005b4:	080005dc 	.word	0x080005dc
 80005b8:	080005dc 	.word	0x080005dc
 80005bc:	080005dc 	.word	0x080005dc
 80005c0:	080005e0 	.word	0x080005e0

080005c4 <_init>:
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	bf00      	nop
 80005c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ca:	bc08      	pop	{r3}
 80005cc:	469e      	mov	lr, r3
 80005ce:	4770      	bx	lr

080005d0 <_fini>:
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	bf00      	nop
 80005d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d6:	bc08      	pop	{r3}
 80005d8:	469e      	mov	lr, r3
 80005da:	4770      	bx	lr
