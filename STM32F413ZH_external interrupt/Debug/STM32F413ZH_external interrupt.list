
STM32F413ZH_external interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800047c  0800047c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000480  08000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000484  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000488  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000488  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019dd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000544  00000000  00000000  00021a11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00021f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00022138  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e6c3  00000000  00000000  000222d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d91  00000000  00000000  00040993  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bd807  00000000  00000000  00042724  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fff2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005ac  00000000  00000000  000fffa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08000464 	.word	0x08000464

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	08000464 	.word	0x08000464

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	; (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <EXTI15_10_IRQHandler>:

#include "main.h"

void EXTI15_10_IRQHandler(void){
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
	// обработчик прерывания.
	// так как он работает на 5 пинов. нужно проверять откуда пришло нажание -- регистр PR
	if((EXTI -> PR & (EXTI_PR_PR13))){
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <EXTI15_10_IRQHandler+0x28>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000260:	2b00      	cmp	r3, #0
 8000262:	d006      	beq.n	8000272 <EXTI15_10_IRQHandler+0x1e>
		EXTI -> PR |= (EXTI_PR_PR13); // сброс, чтоб не завис
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <EXTI15_10_IRQHandler+0x28>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	4a04      	ldr	r2, [pc, #16]	; (800027c <EXTI15_10_IRQHandler+0x28>)
 800026a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026e:	6153      	str	r3, [r2, #20]
	}




		return;
 8000270:	bf00      	nop
 8000272:	bf00      	nop
}
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40013c00 	.word	0x40013c00

08000280 <SysClock_Init>:

void SysClock_Init(void) {
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	RCC->CR   |= RCC_CR_HSEON;
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <SysClock_Init+0x34>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <SysClock_Init+0x34>)
 800028a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800028e:	6013      	str	r3, [r2, #0]
	RCC->CFGR |= RCC_CFGR_SW_HSE;
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <SysClock_Init+0x34>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <SysClock_Init+0x34>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSE);
 800029c:	bf00      	nop
 800029e:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <SysClock_Init+0x34>)
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f003 030c 	and.w	r3, r3, #12
 80002a6:	2b04      	cmp	r3, #4
 80002a8:	d1f9      	bne.n	800029e <SysClock_Init+0x1e>
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	40023800 	.word	0x40023800

080002b8 <Init_EXTI>:

void Init_EXTI(void){
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOCEN; // тактирование порта кнопки
 80002bc:	4b11      	ldr	r3, [pc, #68]	; (8000304 <Init_EXTI+0x4c>)
 80002be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c0:	4a10      	ldr	r2, [pc, #64]	; (8000304 <Init_EXTI+0x4c>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002c8:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <Init_EXTI+0x4c>)
 80002ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <Init_EXTI+0x4c>)
 80002ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002d2:	6453      	str	r3, [r2, #68]	; 0x44


	/*
	 * Button = PC13
	 */
	SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI13_PC;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <Init_EXTI+0x50>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <Init_EXTI+0x50>)
 80002da:	f043 0320 	orr.w	r3, r3, #32
 80002de:	6153      	str	r3, [r2, #20]

	// Вывод МК должен быть настрое как вход.
	// На плате вывод резитором притянут на земле. Замыкание происходит на питание

	//EXTI -> RTSR |= EXTI_RTSR_TR13;	// Прерывание по нарастанию импульса
	EXTI -> FTSR |= EXTI_FTSR_TR13; // Прерывание по спаду импульса
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <Init_EXTI+0x54>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4a09      	ldr	r2, [pc, #36]	; (800030c <Init_EXTI+0x54>)
 80002e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ea:	60d3      	str	r3, [r2, #12]

	EXTI -> IMR |= EXTI_IMR_IM13; // Прерывание 13 включено
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <Init_EXTI+0x54>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a06      	ldr	r2, [pc, #24]	; (800030c <Init_EXTI+0x54>)
 80002f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002f6:	6013      	str	r3, [r2, #0]

	//А что с это строкой???
	//ошибка(((

	NVIC_EnableIRQ(EXTI15_10_IRQn); // А где брать вот эти начальные названия???да, если для usart
 80002f8:	2028      	movs	r0, #40	; 0x28
 80002fa:	f7ff ff8d 	bl	8000218 <__NVIC_EnableIRQ>


 //  может в еррор лист что-то будет?


}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40023800 	.word	0x40023800
 8000308:	40013800 	.word	0x40013800
 800030c:	40013c00 	.word	0x40013c00

08000310 <main>:

int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	SysClock_Init();
 8000314:	f7ff ffb4 	bl	8000280 <SysClock_Init>
	Init_EXTI();
 8000318:	f7ff ffce 	bl	80002b8 <Init_EXTI>
	while (1)
 800031c:	e7fe      	b.n	800031c <main+0xc>

0800031e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000322:	e7fe      	b.n	8000322 <NMI_Handler+0x4>

08000324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000328:	e7fe      	b.n	8000328 <HardFault_Handler+0x4>

0800032a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800032a:	b480      	push	{r7}
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800032e:	e7fe      	b.n	800032e <MemManage_Handler+0x4>

08000330 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <BusFault_Handler+0x4>

08000336 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800033a:	e7fe      	b.n	800033a <UsageFault_Handler+0x4>

0800033c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800036a:	f000 f843 	bl	80003f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <SystemInit+0x28>)
 800037a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800037e:	4a07      	ldr	r2, [pc, #28]	; (800039c <SystemInit+0x28>)
 8000380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <SystemInit+0x28>)
 800038a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800038e:	609a      	str	r2, [r3, #8]
#endif
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80003a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80003a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003a6:	e003      	b.n	80003b0 <LoopCopyDataInit>

080003a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ae:	3104      	adds	r1, #4

080003b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003b0:	480b      	ldr	r0, [pc, #44]	; (80003e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003b8:	d3f6      	bcc.n	80003a8 <CopyDataInit>
  ldr  r2, =_sbss
 80003ba:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003bc:	e002      	b.n	80003c4 <LoopFillZerobss>

080003be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80003be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003c0:	f842 3b04 	str.w	r3, [r2], #4

080003c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003c8:	d3f9      	bcc.n	80003be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003ca:	f7ff ffd3 	bl	8000374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ce:	f000 f825 	bl	800041c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003d2:	f7ff ff9d 	bl	8000310 <main>
  bx  lr    
 80003d6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80003d8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80003dc:	08000484 	.word	0x08000484
  ldr  r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003e4:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80003e8:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80003ec:	20000024 	.word	0x20000024

080003f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003f0:	e7fe      	b.n	80003f0 <ADC_IRQHandler>
	...

080003f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003f8:	4b06      	ldr	r3, [pc, #24]	; (8000414 <HAL_IncTick+0x20>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_IncTick+0x24>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4413      	add	r3, r2
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <HAL_IncTick+0x24>)
 8000406:	6013      	str	r3, [r2, #0]
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	20000000 	.word	0x20000000
 8000418:	20000020 	.word	0x20000020

0800041c <__libc_init_array>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	4e0d      	ldr	r6, [pc, #52]	; (8000454 <__libc_init_array+0x38>)
 8000420:	4c0d      	ldr	r4, [pc, #52]	; (8000458 <__libc_init_array+0x3c>)
 8000422:	1ba4      	subs	r4, r4, r6
 8000424:	10a4      	asrs	r4, r4, #2
 8000426:	2500      	movs	r5, #0
 8000428:	42a5      	cmp	r5, r4
 800042a:	d109      	bne.n	8000440 <__libc_init_array+0x24>
 800042c:	4e0b      	ldr	r6, [pc, #44]	; (800045c <__libc_init_array+0x40>)
 800042e:	4c0c      	ldr	r4, [pc, #48]	; (8000460 <__libc_init_array+0x44>)
 8000430:	f000 f818 	bl	8000464 <_init>
 8000434:	1ba4      	subs	r4, r4, r6
 8000436:	10a4      	asrs	r4, r4, #2
 8000438:	2500      	movs	r5, #0
 800043a:	42a5      	cmp	r5, r4
 800043c:	d105      	bne.n	800044a <__libc_init_array+0x2e>
 800043e:	bd70      	pop	{r4, r5, r6, pc}
 8000440:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000444:	4798      	blx	r3
 8000446:	3501      	adds	r5, #1
 8000448:	e7ee      	b.n	8000428 <__libc_init_array+0xc>
 800044a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800044e:	4798      	blx	r3
 8000450:	3501      	adds	r5, #1
 8000452:	e7f2      	b.n	800043a <__libc_init_array+0x1e>
 8000454:	0800047c 	.word	0x0800047c
 8000458:	0800047c 	.word	0x0800047c
 800045c:	0800047c 	.word	0x0800047c
 8000460:	08000480 	.word	0x08000480

08000464 <_init>:
 8000464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000466:	bf00      	nop
 8000468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800046a:	bc08      	pop	{r3}
 800046c:	469e      	mov	lr, r3
 800046e:	4770      	bx	lr

08000470 <_fini>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr
